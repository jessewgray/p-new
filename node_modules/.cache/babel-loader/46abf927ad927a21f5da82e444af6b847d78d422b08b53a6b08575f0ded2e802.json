{"ast":null,"code":"var _jsxFileName = \"/Users/jessegray/Documents/jesseMac/code/apps/gitFolder/test2023/test-app/src/AddNew.js\";\nimport React, { Component } from 'react';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport Divider from '@mui/material/Divider';\nimport Avatar from '@mui/material/Avatar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AddNew extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      comment: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(event) {\n    // let someName = document.querySelector('.inputName').value;\n    let someComment = document.querySelector('.inputComment').value;\n    this.setState({\n      // name: someName,\n      comment: someComment\n    });\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    let now = new Date();\n    let nowString = now.toDateString();\n    let user;\n    if (localStorage.getItem('name')) {\n      user = localStorage.getItem('name');\n    } else {\n      user = 'anonymous';\n    }\n    localStorage.getItem('name');\n    fetch('http://localhost:5000/post', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({\n        \"image\": \"no image\",\n        \"name\": user,\n        \"comment\": this.state.comment,\n        \"time\": nowString\n      })\n    }).then(function (response) {\n      //console.log(response)\n      return response.json();\n    });\n    let showLI = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        wrap: \"nowrap\",\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            alt: \"Remy Sharp\",\n            src: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          justifyContent: \"left\",\n          item: true,\n          xs: true,\n          zeroMinWidth: true,\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            style: {\n              margin: 0,\n              textAlign: \"left\"\n            },\n            children: this.state.someName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              textAlign: \"left\"\n            },\n            children: this.state.someComment\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              textAlign: \"left\",\n              color: \"gray\"\n            },\n            children: \"posted 1 minute ago\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {\n        variant: \"fullWidth\",\n        style: {\n          margin: \"30px 0\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 23\n    }, this);\n    let last = window.document.getElementsByClassName('aComment').length - 1;\n    let getLast = window.document.getElementsByClassName('aComment')[last];\n    getLast.append( /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"this is a p tag\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 24\n    }, this));\n    console.log('this is the showLI' + showLI);\n\n    //empty inputs after submit\n    this.setState({\n      name: \"\",\n      comment: \"\"\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"this is the form section\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Comment:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"inputComment\",\n            type: \"text\",\n            value: this.state.comment,\n            name: this.state.comment,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"submit\",\n          value: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default AddNew;","map":{"version":3,"names":["React","Component","Paper","Grid","Divider","Avatar","jsxDEV","_jsxDEV","AddNew","constructor","props","state","name","comment","handleChange","bind","handleSubmit","event","someComment","document","querySelector","value","setState","preventDefault","now","Date","nowString","toDateString","user","localStorage","getItem","fetch","method","headers","body","JSON","stringify","then","response","json","showLI","children","container","wrap","spacing","item","alt","src","fileName","_jsxFileName","lineNumber","columnNumber","justifyContent","xs","zeroMinWidth","style","margin","textAlign","someName","color","variant","last","window","getElementsByClassName","length","getLast","append","console","log","render","onSubmit","className","type","onChange"],"sources":["/Users/jessegray/Documents/jesseMac/code/apps/gitFolder/test2023/test-app/src/AddNew.js"],"sourcesContent":["import React, {Component} from 'react'\n\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport Divider from '@mui/material/Divider';\nimport Avatar from '@mui/material/Avatar'\n\n\n\nclass AddNew extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            comment: ''\n        };\n    \n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n      }\n      \n\n      handleChange(event) {\n        // let someName = document.querySelector('.inputName').value;\n        let someComment = document.querySelector('.inputComment').value;\n        this.setState({\n            // name: someName,\n            comment: someComment\n        });\n      }\n    \n      handleSubmit(event) {\n        event.preventDefault();\n            let now = new Date;\n            let nowString = now.toDateString();\n\n            let user \n            if(localStorage.getItem('name')){\n                user = localStorage.getItem('name')\n            }else{\n                user = 'anonymous'\n            }\n\n            localStorage.getItem('name')\n\n\n            fetch('http://localhost:5000/post', {\n              method: 'POST',\n              headers: {'Content-Type': 'application/json'},\n              // We convert the React state to JSON and send it as the POST body\n              body: JSON.stringify({\"image\": \"no image\", \"name\": user, \"comment\": this.state.comment, \"time\": nowString})\n          }).then(function(response) {\n              //console.log(response)\n              return response.json();\n          });\n\n        let showLI = (<div>\n          <Grid container wrap=\"nowrap\" spacing={2}>\n              <Grid item>\n                  <Avatar alt=\"Remy Sharp\" src='' />\n              </Grid>\n              <Grid justifyContent=\"left\" item xs zeroMinWidth>\n                  <h4 style={{ margin: 0, textAlign: \"left\" }}>{this.state.someName}</h4>\n                  <p style={{ textAlign: \"left\" }}>{this.state.someComment}</p>\n                  <p style={{ textAlign: \"left\", color: \"gray\" }}>posted 1 minute ago</p>\n              </Grid>\n          </Grid>\n          <Divider variant=\"fullWidth\" style={{ margin: \"30px 0\" }} /></div>)\n          \n        let last = window.document.getElementsByClassName('aComment').length - 1;\n        let getLast = window.document.getElementsByClassName('aComment')[last]\n        getLast.append(<p>this is a p tag</p>)\n        console.log('this is the showLI' + showLI)\n        \n        //empty inputs after submit\n        this.setState({\n            name: \"\",\n            comment:\"\"\n        });\n        \n      }\n\n\n\n    render(){\n        return(\n            <div>\n                <p>this is the form section</p>\n\n                <form onSubmit={this.handleSubmit}>\n                    {/* <label>\n                    Name:\n                    <input className=\"inputName\" type=\"text\" value={this.state.name} name={this.state.name} onChange={this.handleChange} />\n                    </label> */}\n                    <label>\n                    Comment:\n                    <input className=\"inputComment\" type=\"text\" value={this.state.comment} name={this.state.comment} onChange={this.handleChange} />\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" />\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddNew;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}