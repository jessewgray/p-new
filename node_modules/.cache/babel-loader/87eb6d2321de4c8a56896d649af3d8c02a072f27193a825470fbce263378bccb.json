{"ast":null,"code":"var _jsxFileName = \"/Users/jessegray/Documents/jesseMac/code/apps/gitFolder/test2023/test-app/src/AddNew.js\";\nimport React, { Component } from 'react';\nimport Divider from '@mui/material/Divider';\nimport Avatar from '@mui/material/Avatar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AddNew extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      comment: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(event) {\n    // let someName = document.querySelector('.inputName').value;\n    let someComment = document.querySelector('.inputComment').value;\n    this.setState({\n      // name: someName,\n      comment: someComment\n    });\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    let now = new Date();\n    let nowString = now.toDateString();\n    let user;\n    if (localStorage.getItem('name')) {\n      user = localStorage.getItem('name');\n    } else {\n      user = 'anonymous';\n    }\n    let escapeRegExp = string => {\n      return string.replace(/[.*+?^'${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n    };\n\n    let escapedComment = escapeRegExp(this.state.comment);\n\n    //localStorage.getItem('name')\n\n    //fetch('http://localhost:8080/post', {\n    fetch('https://backend-pigeon.azurewebsites.net/post', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({\n        \"name\": user,\n        \"comment\": escapedComment,\n        \"time\": nowString\n      })\n    }).then(function (response) {\n      //console.log(response)\n      return response.json();\n    }).then(function () {\n      window.location.reload();\n    });\n\n    //empty inputs after submit\n    this.setState({\n      name: \"\",\n      comment: \"\"\n    });\n  }\n  render() {\n    const textAreaStyle = {\n      'display': 'block',\n      'margin': 'auto',\n      'height': '150px',\n      'width': '100%',\n      'padding': '5px'\n    };\n    const formWrap = {\n      'width': '90%',\n      'margin': 'auto'\n    };\n    const inputStyle = {\n      'background': 'transparent',\n      'borderRadius': '5%',\n      'border': 'solid 1px black',\n      'padding': '5px 15px',\n      'fontFamily': 'Permanent Marker, cursive',\n      'margin': '15px 0px'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container theBoxShadow\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"formWrap\",\n        style: formWrap,\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"theLabel\",\n            children: \"Add a Comment:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"inputComment\",\n            type: \"text\",\n            style: textAreaStyle,\n            value: this.state.comment,\n            name: this.state.comment,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"submitWrap\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"submit\",\n              style: inputStyle,\n              value: \"Post\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default AddNew;","map":{"version":3,"names":["React","Component","Divider","Avatar","jsxDEV","_jsxDEV","AddNew","constructor","props","state","name","comment","handleChange","bind","handleSubmit","event","someComment","document","querySelector","value","setState","preventDefault","now","Date","nowString","toDateString","user","localStorage","getItem","escapeRegExp","string","replace","escapedComment","fetch","method","headers","body","JSON","stringify","then","response","json","window","location","reload","render","textAreaStyle","formWrap","inputStyle","className","children","style","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange"],"sources":["/Users/jessegray/Documents/jesseMac/code/apps/gitFolder/test2023/test-app/src/AddNew.js"],"sourcesContent":["import React, {Component} from 'react'\n\nimport Divider from '@mui/material/Divider';\nimport Avatar from '@mui/material/Avatar'\n\n\n\nclass AddNew extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            comment: ''\n        };\n    \n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n      }\n\n      \n    \n      handleChange(event) {\n        // let someName = document.querySelector('.inputName').value;\n        let someComment = document.querySelector('.inputComment').value;\n\n    \n        this.setState({\n            // name: someName,\n            comment: someComment\n        });\n      }\n    \n      handleSubmit(event) {\n        event.preventDefault();\n            let now = new Date;\n            let nowString = now.toDateString();\n\n            let user \n            if(localStorage.getItem('name')){\n                user = localStorage.getItem('name')\n            }else{\n                user = 'anonymous'\n            }\n\n            let escapeRegExp =  (string) => {\n                return string.replace(/[.*+?^'${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n            }\n\n            let escapedComment = escapeRegExp(this.state.comment)\n          \n\n\n            //localStorage.getItem('name')\n            \n\n            //fetch('http://localhost:8080/post', {\n            fetch('https://backend-pigeon.azurewebsites.net/post', {\n              method: 'POST',\n              headers: {'Content-Type': 'application/json'},\n              // We convert the React state to JSON and send it as the POST body\n              body: JSON.stringify({\"name\": user, \"comment\": escapedComment, \"time\": nowString})\n          }).then(function(response) {\n              //console.log(response)\n              return response.json();\n          }).then(function(){\n            window.location.reload();\n          });\n\n\n      \n        \n        //empty inputs after submit\n        this.setState({\n            name: \"\",\n            comment:\"\"\n        });\n        \n      }\n\n      \n\n    render(){\n\n        const textAreaStyle={\n            'display':'block',\n            'margin': 'auto',\n            'height': '150px',\n            'width': '100%',\n            'padding': '5px'\n        }\n        const formWrap={\n            'width':'90%',\n            'margin':'auto'\n        }\n        const inputStyle = {\n            'background':'transparent',\n            'borderRadius': '5%',\n            'border': 'solid 1px black',\n            'padding': '5px 15px',\n            'fontFamily': 'Permanent Marker, cursive',\n            'margin': '15px 0px'\n        }\n\n\n        return(\n            <div className=\"container theBoxShadow\">\n                <div className=\"formWrap\" style={formWrap}>\n                    <form onSubmit={this.handleSubmit}>\n                        {/* <label>\n                        Name:\n                        <input className=\"inputName\" type=\"text\" value={this.state.name} name={this.state.name} onChange={this.handleChange} />\n                        </label> */}\n                        <label className='theLabel'>\n                        Add a Comment:\n                        </label>\n                        <textarea className=\"inputComment\" type=\"text\" style={textAreaStyle} value={this.state.comment} name={this.state.comment} onChange={this.handleChange} />\n                        <div className='submitWrap'>\n                            <input type=\"submit\" style={inputStyle} value=\"Post\" />\n                        </div>\n                        \n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default AddNew;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}