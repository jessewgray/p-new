{"ast":null,"code":"var _jsxFileName = \"/Users/jessegray/Documents/jesseMac/code/apps/gitFolder/test2023/test-app/src/AddNew.js\";\nimport React, { Component } from 'react';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport Divider from '@mui/material/Divider';\nimport Avatar from '@mui/material/Avatar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass AddNew extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      comment: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(event) {\n    // let someName = document.querySelector('.inputName').value;\n    let someComment = document.querySelector('.inputComment').value;\n    this.setState({\n      // name: someName,\n      comment: someComment\n    });\n  }\n  handleSubmit(event) {\n    event.preventDefault();\n    let now = new Date();\n    let nowString = now.toDateString();\n    let user;\n    if (localStorage.getItem('name')) {\n      user = localStorage.getItem('name');\n    } else {\n      user = 'anonymous';\n    }\n\n    //localStorage.getItem('name')\n\n    fetch('http://localhost:5000/post', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      // We convert the React state to JSON and send it as the POST body\n      body: JSON.stringify({\n        \"image\": \"no image\",\n        \"name\": user,\n        \"comment\": this.state.comment,\n        \"time\": nowString\n      })\n    }).then(function (response) {\n      //console.log(response)\n      return response.json();\n    });\n\n    //empty inputs after submit\n    this.setState({\n      name: \"\",\n      comment: \"\"\n    });\n  }\n  render() {\n    const textAreaStyle = {\n      'display': 'block',\n      'margin': 'auto',\n      'height': '150px',\n      'width': '100%'\n    };\n    const formWrap = {\n      'width': '90%',\n      'margin': 'auto'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        'border': 'solid'\n      },\n      class: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"formWrap\",\n        style: formWrap,\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Add a Comment:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"inputComment\",\n            type: \"text\",\n            style: textAreaStyle,\n            value: this.state.comment,\n            name: this.state.comment,\n            onChange: this.handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Post\",\n            variant: \"outlined\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default AddNew;","map":{"version":3,"names":["React","Component","Paper","Grid","Divider","Avatar","jsxDEV","_jsxDEV","AddNew","constructor","props","state","name","comment","handleChange","bind","handleSubmit","event","someComment","document","querySelector","value","setState","preventDefault","now","Date","nowString","toDateString","user","localStorage","getItem","fetch","method","headers","body","JSON","stringify","then","response","json","render","textAreaStyle","formWrap","style","class","children","className","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","variant"],"sources":["/Users/jessegray/Documents/jesseMac/code/apps/gitFolder/test2023/test-app/src/AddNew.js"],"sourcesContent":["import React, {Component} from 'react'\n\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport Divider from '@mui/material/Divider';\nimport Avatar from '@mui/material/Avatar'\n\n\n\nclass AddNew extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            comment: ''\n        };\n    \n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n      }\n      \n\n      handleChange(event) {\n        // let someName = document.querySelector('.inputName').value;\n        let someComment = document.querySelector('.inputComment').value;\n        this.setState({\n            // name: someName,\n            comment: someComment\n        });\n      }\n    \n      handleSubmit(event) {\n        event.preventDefault();\n            let now = new Date;\n            let nowString = now.toDateString();\n\n            let user \n            if(localStorage.getItem('name')){\n                user = localStorage.getItem('name')\n            }else{\n                user = 'anonymous'\n            }\n\n            //localStorage.getItem('name')\n\n\n            fetch('http://localhost:5000/post', {\n              method: 'POST',\n              headers: {'Content-Type': 'application/json'},\n              // We convert the React state to JSON and send it as the POST body\n              body: JSON.stringify({\"image\": \"no image\", \"name\": user, \"comment\": this.state.comment, \"time\": nowString})\n          }).then(function(response) {\n              //console.log(response)\n              return response.json();\n          });\n\n\n      \n        \n        //empty inputs after submit\n        this.setState({\n            name: \"\",\n            comment:\"\"\n        });\n        \n      }\n\n      \n\n    render(){\n\n        const textAreaStyle={\n            'display':'block',\n            'margin': 'auto',\n            'height': '150px',\n            'width': '100%'\n        }\n        const formWrap={\n            'width':'90%',\n            'margin':'auto'\n        }\n\n        return(\n            <div style={{'border': 'solid'}} class=\"container\">\n                <div className=\"formWrap\" style={formWrap}>\n                    <form onSubmit={this.handleSubmit}>\n                        {/* <label>\n                        Name:\n                        <input className=\"inputName\" type=\"text\" value={this.state.name} name={this.state.name} onChange={this.handleChange} />\n                        </label> */}\n                        <label>\n                        Add a Comment:\n                        </label>\n                        <textarea className=\"inputComment\" type=\"text\" style={textAreaStyle} value={this.state.comment} name={this.state.comment} onChange={this.handleChange} />\n                        <input type=\"submit\" value=\"Post\" variant=\"outlined\"/>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default AddNew;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}